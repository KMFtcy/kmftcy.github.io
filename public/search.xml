<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何获取Github上最新的release版本</title>
    <url>/2020/11/25/acquire-github-release-version/</url>
    <content><![CDATA[<p>一般下载 github 上的 release 文件的时候，我们都希望能拿到最新的版本，这个事情用脚本去做好像就不是特别的方便。<br>在 cdr/code-server 提供的安装脚本上，我找到一个非常好用的通用解决方案,原来 GitHub 已经提供了这样的 api 接口,只需要去请求就可以获得版本信息。</p>
<p>以 code-server 为例，获取最新版本只需要三句 shell 脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version=&quot;$(curl -fsSLI -o /dev/null -w &quot;%&#123;url_effective&#125;&quot; https://github.com/cdr/code-server/releases/latest)&quot;</span><br><span class="line">version=&quot;$&#123;version#https://github.com/cdr/code-server/releases/tag/&#125;&quot;</span><br><span class="line">version=&quot;$&#123;version#v&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>对于其他项目，只需要替换“cdr/code-server”中的项目名即可，例如替换为“kubeedge/kubeedge”。<br>有了版本号，就可以按照 release 出来的命名规则进行指定版本的下载了。例如对于 code-server，命名规则为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://github.com/cdr/code-server/releases/download/v$version/code-server_$&#123;version&#125;_$ARCH.deb</span><br></pre></td></tr></table></figure>

<p>下载命令为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fOL https://github.com/cdr/code-server/releases/download/v$version/code-server_$&#123;version&#125;_$ARCH.deb</span><br></pre></td></tr></table></figure>


<p>Comming from <a href="https://blog.kmfchaoyang.top/2020/11/25/acquire-github-release-version/">https://blog.kmfchaoyang.top/2020/11/25/acquire-github-release-version/</a> by Chaoyang Tang</p>
]]></content>
  </entry>
  <entry>
    <title>kubeedge使用域名配置cloud地址</title>
    <url>/2020/11/25/kubeedge-cloud-domain-setting/</url>
    <content><![CDATA[<p>kubeedge 的文档中，使用 keadm 进行 init 和 join 操作所对应的地址都是 ip 地址。但是实际使用当中，反倒不可能直接将 ip 地址暴露出来，而是 domain 的使用情况更多。但是文档中并没有介绍到使用域名作为地址的方法。</p>
<p>经过简单实验，发现域名的配置很简单。这里做简单的记录:</p>
<ol>
<li>生成证书</li>
<li>将证书拷贝到各个节点的/etc/kubeedge 目录</li>
<li>配置文件中记住配对对应的文件位置</li>
<li>手动起 cloudcore 和 edgecore</li>
</ol>
<p>TODO: 补充文件细节</p>
<p>Comming from <a href="https://blog.kmfchaoyang.top/2020/11/25/kubeedge-cloud-domain-setting/">https://blog.kmfchaoyang.top/2020/11/25/kubeedge-cloud-domain-setting/</a> by Chaoyang Tang</p>
]]></content>
      <tags>
        <tag>kubeedge</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeedge 部署记录</title>
    <url>/2020/11/22/kubeedge-deploy/</url>
    <content><![CDATA[<h3 id="使用-kubeadm-进行部署"><a href="#使用-kubeadm-进行部署" class="headerlink" title="使用 kubeadm 进行部署"></a>使用 kubeadm 进行部署</h3><blockquote>
<p>几个值得注意的点：</p>
<ul>
<li>目前只支持 ubuntu 和 centos，并且不支持树莓派</li>
<li>需要使用到 10000 和 10002 端口</li>
<li>kubeedge 分为云端和边端的部署</li>
</ul>
</blockquote>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li>在 Github release 中下载 keadm，目前仅需要下载这个组件就可以完成初始化流程。</li>
<li>云端需要有一个可以使用的 kubernetes 集群。</li>
</ol>
<h4 id="部署云端"><a href="#部署云端" class="headerlink" title="部署云端"></a>部署云端</h4><ol>
<li>初始化云端设备 kubeedge 组件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keadm init --advertise-address=&quot;THE-EXPOSED-IP&quot;(only work since 1.3 release) --kubeedge-version=1.4.0</span><br></pre></td></tr></table></figure>

<p>默认情况下，使用的是本地的 ip。</p>
<p>在 1.3 之前的版本，还需要将初始化生成的证书手动拷贝到边端点上，目前最新版本已经更新到 1.5，实验所使用的是 1.4 版本，因此不需要执行这一步操作。</p>
<p>执行到这里，云端就已经初始化成功了，应该会看到有一个 cloudcore 进程正在节点中运行。</p>
<h4 id="部署边端"><a href="#部署边端" class="headerlink" title="部署边端"></a>部署边端</h4><ol>
<li>执行命令，获取云端 token</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keadm gettoken</span><br></pre></td></tr></table></figure>

<p>输出一段 token，需要手动记住:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">27a37ef16159f7d3be8fae95d588b79b3adaaf92727b72659eb89758c66ffda2.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTAyMTYwNzd9.JBj8LLYWXwbbvHKffJBpPd5CyxqapRQYDIXtFZErgYE</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行命令，加入云端节点</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keadm join --cloudcore-ipport=192.168.20.50:10000 --token=27a37ef16159f7d3be8fae95d588b79b3adaaf92727b72659eb89758c66ffda2.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTAyMTYwNzd9.JBj8LLYWXwbbvHKffJBpPd5CyxqapRQYDIXtFZErgYE --kubeedge-version=1.4.0</span><br></pre></td></tr></table></figure>

<p>执行到这里，节点就已经顺利加入 kubeedge 中了，应该会看到有一个 edgecore 进程正在节点中运行。</p>
<h3 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h3><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li><p>从 GitHub release 上下载最新的 kubeedge 发行版和 keadm。注意只有 1.5 版本开始，kubeedge 的发行版的压缩包中才有 cloudcore，怀疑是负责人忘记放进去了。</p>
<p>如果需要更老的版本，可以在网络好的环境运行：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keadm init</span><br></pre></td></tr></table></figure>

<p>该命令会在当前目录下载好所有需要的压缩包和 yaml 文件。这时候下载的压缩包（从 aws 下载）就有完整的执行文件了。</p>
<ol start="2">
<li>需要四个指定的 CRDs 的 yaml 文件，这个建议按上面说的方式下载。</li>
</ol>
<h4 id="创建一些-CRDs"><a href="#创建一些-CRDs" class="headerlink" title="创建一些 CRDs"></a>创建一些 CRDs</h4><p>这几个 crd 是 kubeedge 使用的模型,需要预先加入 k8s 集群。显然是可以提前下载下来的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubeedge/kubeedge/master/build/crds/devices/devices_v1alpha2_device.yaml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubeedge/kubeedge/master/build/crds/devices/devices_v1alpha2_devicemodel.yaml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubeedge/kubeedge/master/build/crds/reliablesyncs/cluster_objectsync_v1alpha1.yaml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubeedge/kubeedge/master/build/crds/reliablesyncs/objectsync_v1alpha1.yaml</span><br></pre></td></tr></table></figure>

<h4 id="部署云端-1"><a href="#部署云端-1" class="headerlink" title="部署云端"></a>部署云端</h4><ol>
<li>获得默认配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cloudcore --minconfig &gt; cloudcore.yaml</span><br></pre></td></tr></table></figure>

<p>TODO: 具体的配置内容</p>
<ol start="2">
<li>运行 cloudcore，建议后台运行并将输出重定向到 log 文件。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cloudcore --config cloudcore.yaml</span><br></pre></td></tr></table></figure>

<h4 id="部署边端-1"><a href="#部署边端-1" class="headerlink" title="部署边端"></a>部署边端</h4><ol>
<li>获得默认配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">edgecore --minconfig &gt; edgecore.yaml</span><br></pre></td></tr></table></figure>

<p>TODO: 具体的配置内容</p>
<ol start="2">
<li>获得云端服务器的 token，该 token 已经被保存到 kubernetes 集群当中了。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get secret -nkubeedge tokensecret -o=jsonpath=&#x27;&#123;.data.tokendata&#125;&#x27; | base64 -d</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将配置文件中的相关字段添加上 token</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i -e &quot;s|token: .*|token: $&#123;token&#125;|g&quot; edgecore.yaml</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>运行边端进程</li>
</ol>
<p>如果云端和边端为同一节点，则需要注明变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CHECK_EDGECORE_ENVIRONMENT=&quot;false&quot;</span><br></pre></td></tr></table></figure>

<p>运行边端进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">edgecore --config edgecore.yaml</span><br></pre></td></tr></table></figure>

<h2 id="一些发现"><a href="#一些发现" class="headerlink" title="一些发现"></a>一些发现</h2><p>keadm 部署的速度特别慢，其中一个原因就是 keadm 会从 aws 上拉取安装文件的压缩包，但是在国内速度特别慢，花费四十分钟有时还会中途被打断。</p>
<p>但是后面发现，keadm 会对 <code>/etc/kubeedge</code>这个目录做检查，如果目录下面有指定目录（默认最新版本）压缩包，就直接进行 checksum 检查,如果正确就不会重复下载了。</p>
<p>这也是为什么使用 keadm 命令的时候，建议特别指定 kubeedge-version，这样可以提前下载对应版本压缩包，节省部署时间。</p>
<p>Comming from <a href="https://blog.kmfchaoyang.top/2020/11/22/kubeedge-deploy/">https://blog.kmfchaoyang.top/2020/11/22/kubeedge-deploy/</a> by Chaoyang Tang</p>
]]></content>
      <tags>
        <tag>kubeedge</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeedge 两个重要组件镜像制作</title>
    <url>/2020/12/01/kubeedge-image/</url>
    <content><![CDATA[<p>将 kubeedge 放入容器当中，这件事听起来就像在 container 里面使用 docker 一样有些错位。</p>
<p>可能有些人会说，这不就像是 kubernetes 一样，把组件容器化嘛,像是 apiserver、controller 都是以容器形式提供服务的。但是 kubeedge 组件的身份更像是 kubelet，以一个进程的身份调用接口、拉起容器，而不知道是什么原因 kubernetes 并没有把这个组件也同样给容器化了。</p>
<p>虽然 kubernetes 没有带这个头，但是这件事实际上是完全可行的，需要什么接口，就把什么接口挂进容器，需要什么程序，在容器里准备好就好了。今天进行了一下尝试，最终成功了，这里记录一下过程和一些可能踩坑的点。</p>
<p>官方实际上已经有自己的镜像了，但是这个镜像上次更新竟然是在一年前，几乎差了三个版本！实在是不敢用啊，更不是很敢投入到生产当中</p>
<p>Comming from <a href="https://blog.kmfchaoyang.top/2020/12/01/kubeedge-image/">https://blog.kmfchaoyang.top/2020/12/01/kubeedge-image/</a> by Chaoyang Tang</p>
]]></content>
  </entry>
</search>
